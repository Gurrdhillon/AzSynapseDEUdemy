{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synspe-course-ws"
		},
		"ls_serverless_sql_pool_nyc_taxi_ldw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_serverless_sql_pool_nyc_taxi_ldw'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synspe-course-ws-ondemand.sql.azuresynapse.net,1433;Initial Catalog=nyc_taxi_ldw"
		},
		"synspe-course-ws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synspe-course-ws-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synspe-course-ws.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"ls_synpase_course_dl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecoursedlg.dfs.core.windows.net/"
		},
		"synspe-course-ws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecoursedlg.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_trip_data')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Trip Data Year and Month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "SELECT DISTINCT \nyear, \nmonth \nFROM bronze.vw_trip_data"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach Year and Month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Trip Data Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Trip Data Year and Month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 3,
							"activities": [
								{
									"name": "Delete_trip_data_year_month",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "nyc_green_taxi_data/silver/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "sp_for_trip_data_year_month",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete_trip_data_year_month",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_silver_trip_data]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pla-create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "delete_silver_taxi_zone",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "create taxi zone in silver schema",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "delete_silver_taxi_zone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID('silver.CETAS_taxi_zone') IS NOT NULL\n\tDROP EXTERNAL TABLE silver.CETAS_taxi_zone;"
								},
								{
									"type": "Query",
									"text": "CREATE EXTERNAL TABLE silver.CETAS_taxi_zone\n\tWITH \n\t(\n\t\tDATA_SOURCE = nyc_taxi_src,\n\t\tLOCATION = 'silver/taxi_zone',\n\t\tFILE_FORMAT = parquet_file_format\n\t)\nAS\nSELECT * \nFROM bronze.taxi_zone;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pla-create_silver_taxi_zone_with_procedure')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "delete_silver_taxi_zone",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "uso_taxi_zone",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "delete_silver_taxi_zone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[usp_silver_taxi_zone]"
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pla-create_silver_taxi_zone_with_procedure_with_parameter')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Creating a stored procedure with parameters",
				"activities": [
					{
						"name": "delete_silver_taxi_zone",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_nyc_taxi_data_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"p_folder_path": {
										"value": "@variables('v_folder_path')",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "usp_taxi_zone",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "delete_silver_taxi_zone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('v_usp_name')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"v_folder_path": {
						"type": "String",
						"defaultValue": "nyc_green_taxi_data/silver/taxi_zone"
					},
					"v_usp_name": {
						"type": "String",
						"defaultValue": "silver.usp_silver_taxi_zone"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pla-create_silver_taxi_zone_with_stored_procedure')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "delete_silver_taxi_zone",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "usp_taxi_zone",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[usp_silver_taxi_zone]"
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synpase_course_dl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synpase_course_dl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_nyc_taxi_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "I can use parameters to get a specific file in the nyc_taxi_data folder",
				"linkedServiceName": {
					"referenceName": "ls_synpase_course_dl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxidata"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "location_id",
						"type": "INT_16"
					},
					{
						"name": "borough",
						"type": "UTF8"
					},
					{
						"name": "zone",
						"type": "UTF8"
					},
					{
						"name": "service_zone",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synpase_course_dl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synpase_course_dl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyc_green_taxi_data/silver/taxi_zone",
						"fileSystem": "nyc-taxidata"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "location_id",
						"type": "INT_16"
					},
					{
						"name": "borough",
						"type": "UTF8"
					},
					{
						"name": "zone",
						"type": "UTF8"
					},
					{
						"name": "service_zone",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synpase_course_dl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_pool_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_serverless_sql_pool_nyc_taxi_ldw_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_synpase_course_dl')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_synpase_course_dl_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synspe-course-ws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synspe-course-ws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synspe-course-ws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synspe-course-ws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_create_bronze_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nDROP VIEW IF EXISTS bronze.vw_rate_code\nGO\n\nCREATE VIEW bronze.vw_rate_code AS  \n    SELECT rate_code_id, rate_code\n    FROM \n    OPENROWSET(\n            BULK 'raw/rate_code.json',\n            DATA_SOURCE = 'nyc_taxi_src',\n            FORMAT = 'CSV',\n    --         PARSER_VERSION = '1.0',\n            -- HEADER_ROW = TRUE,\n            FIELDTERMINATOR = '0x0b',    --0x0b for vertical tab\n            FIELDQUOTE = '0x0b',\n            ROWTERMINATOR = '0x0b'   --This row terminator is required for working with standard json file\n        )\n        WITH \n        (\n            jsonDoc NVARCHAR(MAX)\n        )\n        AS rate_code\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH \n        (\n            rate_code_id TINYINT,\n            rate_code VARCHAR(20)\n        );\nGO\n\nSELECT * FROM bronze.vw_rate_code\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_join_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery\n\n--Identitfy number of trips made from each borough\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n    WHERE PULocationID IS NULL\n\n    -- SELECT  TOP 100 trip_data.*, taxi_zone_data.*\nSELECT\n    taxi_zone_data.Borough, COUNT(1) AS number_of_trips FROM \n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'PARQUET'\n    ) AS [trip_data]\n    JOIN \n    OPENROWSET(\n        BULK 'https://synapsecoursedlg.dfs.core.windows.net/nyc-taxidata/nyc_green_taxi_data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [taxi_zone_data]\n    ON \n    [trip_data].PULocationID = [taxi_zone_data].LocationID\n    GROUP BY taxi_zone_data.Borough",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_prune_partitioning')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nDROP VIEW IF EXISTS bronze.vw_trip_data\nGO\nCREATE VIEW bronze.vw_trip_data AS  \nSELECT trip_data.filepath(1) AS year, --FilePath is taking the very first thing from the filepath\n        trip_data.filepath(2) AS month,  --Second thing in the filepath is month, so it is found by filepath(2)\n        trip_data.*\n    FROM   \n    OPENROWSET(\n        BULK 'raw/trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n        -- ,HEADER_ROW = TRUE\n    )  AS [trip_data]\n    --  WHERE trip_data.filepath(1) = '2020'\n    --     -- AND trip_data.filepath(2) IN ('06','07','08')\n    -- GROUP BY trip_data.filepath(1), trip_data.filepath(2)\n    -- ORDER BY trip_data.filepath(1), trip_data.filepath(2)\n\n\nSELECT TOP 100 * FROM bronze.vw_trip_data;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_gold_layer_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "\n\nSELECT td.year, \n        td.month,\n        tz.borough, \n        cal.day_name AS trip_day,\n        CONVERT(DATE, td.lpep_pickup_datetime) AS trip_date,\n        CASE WHEN cal.day_name IN ('Saturday', 'Sunday') THEN 'Y' ELSE 'N' END AS weekend_trip,\n        SUM(CASE WHEN pt.payment_type_desc = 'Credit card' THEN 1 ELSE 0 END) AS card_trips_count,\n        SUM(CASE WHEN pt.payment_type_desc = 'Cash' THEN 1 ELSE 0 END) AS cash_trips_count\nFROM bronze.vw_trip_data as td\nJOIN  silver.CETAS_taxi_zone tz ON (td.PULocationID = tz.location_id)\nJOIN silver.CETAS_calendar cal ON (cal.date = CONVERT(DATE, td.lpep_pickup_datetime))\nJOIN silver.CETAS_payment_type pt ON (td.payment_type = pt.payment_type)\nWHERE td.year = '2020'\nAND td.month = '01'\nGROUP BY \ntd.year, \n        td.month,\n        tz.borough, \n        cal.day_name,\n        CONVERT(DATE, td.lpep_pickup_datetime)\n       \n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_Execute_taxi_zone_usp')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nEXECUTE silver.usp_silver_taxi_zone;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_CETAS_taxi_zone_csv_to_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/CETAS"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nIF OBJECT_ID('silver.CETAS_taxi_zone') IS NOT NULL\n\tDROP EXTERNAL TABLE silver.CETAS_taxi_zone;\n\nCREATE EXTERNAL TABLE silver.CETAS_taxi_zone\n\tWITH \n\t(\n\t\tDATA_SOURCE = nyc_taxi_src,\n\t\tLOCATION = 'silver/taxi_zone',\n\t\tFILE_FORMAT = parquet_file_format\n\t)\nAS\nSELECT * \nFROM bronze.taxi_zone;\n\n\nSELECT * FROM silver.CETAS_taxi_zone\n\n\nEXECUTE silver.usp_silver_taxi_zone",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_database')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "USE master\nGO\n\n--WHEN we create a database, we should be using master database, thats why on very first line,  \n-- I switched to master database\nCREATE DATABASE nyc_taxi_ldw\nGO\n\nALTER DATABASE nyc_taxi_ldw COLLATE Latin1_General_100_BIN2_UTF8\nGO\n\n\nUSE nyc_taxi_ldw\nGO\n\nCREATE SCHEMA bronze\nGO\n\nDROP SCHEMA broze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_exolore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedlg.dfs.core.windows.net/nyc-taxidata/nyc_green_taxi_data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n\n----Query data using bulk abfss\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxidata@synapsecoursedlg.dfs.core.windows.net/nyc_green_taxi_data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n\nSELECT name, collation_name FROM sys.databases\n\n--Creating an external data source using https protocol \nCREATE EXTERNAL DATA SOURCE nyc_taxi_data\nWITH (\n    LOCATION = 'https://synapsecoursedlg.dfs.core.windows.net/nyc-taxi-data'\n)\n\n--Creating an external data source using https abfss\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data\nWITH (\n    LOCATION = 'abfss://nyc-taxidata@synapsecoursedlg.dfs.core.windows.net/'\n)\n\n\n-- Using external data source instead of file link\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK '/nyc_green_taxi_data/raw/taxi_zone.csv',\n        DATA_SOURCE  = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        -- HEADER_ROW = TRUE,\n        FIRSTROW = 2,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n        locationId SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    ) AS [result]\n\n\n---Drop/Delete External Data Source\nDROP EXTERNAL DATA SOURCE nyc_taxi_data\n\n---TO find out where data source is pointig to \nSELECT name, location FROM sys.external_data_sources\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_usp_silver_trip_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/StoredProcedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_data\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN \n\n-----Creating a SQL\n    DECLARE @create_sql  NVARCHAR(MAX),\n            @drop_sql   NVARCHAR(MAX);\n\n    SET @create_sql = \n    'CREATE EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month + \n\t' WITH \n\t(\n\t\tDATA_SOURCE = nyc_taxi_src,\n\t\tLOCATION = ''silver/trip_data_green/year=' + @year + '/month=' + @month + ''',\n\t\tFILE_FORMAT = parquet_file_format\n\t)\n    AS\n    SELECT * \n    FROM bronze.vw_trip_data\n    WHERE year = ''' + @year + '''\n    AND month = ''' + @month + '''\n    '\n    print(@create_sql)\n\n    EXEC sp_executesql @create_sql;\n\n    SET @drop_sql = \n    ' DROP EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month;\n\n    EXEC sp_executesql @drop_sql;\n\nEND\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_CETAS_calendar_csv_to_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/CETAS"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\n\nCREATE EXTERNAL TABLE silver.CETAS_calendar\n\tWITH \n\t(\n\t\tDATA_SOURCE = nyc_taxi_src,\n\t\tLOCATION = 'silver/calendar',\n\t\tFILE_FORMAT = parquet_file_format\n\t)\nAS\nSELECT * \nFROM bronze.calender;\n\n\nSELECT * FROM silver.CETAS_calendar",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_external_source')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE EXTERNAL DATA SOURCE nyc_taxi_src\nWITH\n  (  LOCATION = 'abfss://nyc-taxidata@synapsecoursedlg.dfs.core.windows.net/nyc_green_taxi_data' \n\n  )\n; ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_execute_stored_procedure')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/StoredProcedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nEXEC silver.usp_silver_trip_data '2020', '01'\n\n-- CREATE EXTERNAL TABLE silver.trip_data_green2020_01 WITH ( DATA_SOURCE = nyc_taxi_src, LOCATION = 'silver/trip_data_green/year=2020/month=01', FILE_FORMAT = parquet_file_format ) \n-- AS SELECT * FROM bronze.vw_trip_data WHERE year = '2020' AND month = '01'\n\n\n-- DROP EXTERNAL TABLE silver.trip_data_green2020_01\n\n\nEXEC gold.usp_gold_trip_data '2020', '01'\nEXEC gold.usp_gold_trip_data '2020', '02'\nEXEC gold.usp_gold_trip_data '2020', '03'\nEXEC gold.usp_gold_trip_data '2020', '04'\nEXEC gold.usp_gold_trip_data '2020', '05'\nEXEC gold.usp_gold_trip_data '2020', '06'\nEXEC gold.usp_gold_trip_data '2020', '07'\nEXEC gold.usp_gold_trip_data '2020', '08'\nEXEC gold.usp_gold_trip_data '2020', '09'\nEXEC gold.usp_gold_trip_data '2020', '10'\nEXEC gold.usp_gold_trip_data '2020', '11'\nEXEC gold.usp_gold_trip_data '2020', '12\n'EXEC gold.usp_gold_trip_data '2021','01'\nEXEC gold.usp_gold_trip_data '2021', '02'\nEXEC gold.usp_gold_trip_data '2021', '03'\nEXEC gold.usp_gold_trip_data '2021', '04'\nEXEC gold.usp_gold_trip_data '2021', '05'\nEXEC gold.usp_gold_trip_data '2021', '06'\nEXEC gold.usp_gold_trip_data '2021', '07'\nEXEC gold.usp_gold_trip_data '2021', '08'\nEXEC gold.usp_gold_trip_data '2021', '09'\nEXEC gold.usp_gold_trip_data '2021', '10'\nEXEC gold.usp_gold_trip_data '2021', '11'\nEXEC gold.usp_gold_trip_data '2021', '12'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "----Query data using bulk abfss\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxidata@synapsecoursedlg.dfs.core.windows.net/nyc_green_taxi_data/raw/calendar.csv',\n        FORMAT = 'CSV',\n--         PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    WITH (\n        dateKey VARCHAR(50) 2,\n        date  VARCHAR(50) 1, \n        year  VARCHAR(50) 3, \n        month VARCHAR(50) 4\n    )\n     AS [result]\n     \n\n---Access data using external data source\nSELECT\n   *\nFROM\n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/calendar.csv',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        -- FIRSTROW = 2,\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n    -- WITH (\n    --     dateKey VARCHAR(50) 2,\n    --     date  VARCHAR(50) 1, \n    --     year  VARCHAR(50) 3, \n    --     month VARCHAR(50) 4\n    -- )\n     AS [result]\n\n\n----Stored Procedure to find datatype \n\nEXEC sp_describe_first_result_set N'SELECT * \n    FROM OPENROWSET(\n        BULK ''nyc_green_taxi_data/raw/calendar.csv'',\n        DATA_SOURCE = ''nyc_taxi_data'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n    ) AS [calendar]'\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_CETAS_vendor_csv_to_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/CETAS"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE EXTERNAL TABLE silver.CETAS_vendor\n\tWITH \n\t(\n\t\tDATA_SOURCE = nyc_taxi_src,\n\t\tLOCATION = 'silver/vendor',\n\t\tFILE_FORMAT = parquet_file_format\n\t)\nAS\nSELECT * \nFROM bronze.vendor;\n\n\nSELECT * FROM silver.CETAS_vendor\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_external_file_format')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n-- Create an external file format for DELIMITED (CSV/TSV) files.\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'csv_file_format')\n  CREATE EXTERNAL FILE FORMAT csv_file_format\n  WITH (\n          FORMAT_TYPE = DELIMITEDTEXT\n      , FORMAT_OPTIONS (     \n        FIELD_TERMINATOR = ','\n      , STRING_DELIMITER = '\"'\n      , FIRST_ROW = 2 -- ONLY AVAILABLE FOR AZURE SYNAPSE ANALYTICS\n      , USE_TYPE_DEFAULT =  FALSE\n      , ENCODING = 'UTF8'\n      , PARSER_VERSION = '2.0'\n      )\n      );\n\n\n-- Create an external file format for DELIMITED (CSV/TSV) files.\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'tsv_file_format')\nCREATE EXTERNAL FILE FORMAT tsv_file_format\nWITH (\n        FORMAT_TYPE = DELIMITEDTEXT\n     , FORMAT_OPTIONS (     \n      FIELD_TERMINATOR = '\\t'\n    , STRING_DELIMITER = '\"'\n    , FIRST_ROW = 2 -- ONLY AVAILABLE FOR AZURE SYNAPSE ANALYTICS\n    , USE_TYPE_DEFAULT =  FALSE\n    , ENCODING = 'UTF8'\n    , PARSER_VERSION = '2.0'\n    )\n     );\n\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'parquet_file_format')\n  --Create an external file format for PARQUET files.\n  CREATE EXTERNAL FILE FORMAT parquet_file_format\n  WITH (\n          FORMAT_TYPE = PARQUET\n       , DATA_COMPRESSION = \n          'org.apache.hadoop.io.compress.SnappyCodec'   \n      );\n\n\nDROP EXTERNAL FILE FORMAT file_format_name;\n\n----Create external file format for delta\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'delta_file_format')\n  --Create an external file format for PARQUET files.\n    CREATE EXTERNAL FILE FORMAT delta_file_format\n    WITH (\n            FORMAT_TYPE = DELTA\n          );\n  ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_explore_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/vendor_unquoted.csv',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        -- FIRSTROW = 2,\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    )\n     AS [result]\n\n--Selecting data from a file with a commma\nSELECT * FROM \nOPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/vendor_escaped.csv',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        -- FIRSTROW = 2,\n        HEADER_ROW = TRUE,\n        ESCAPECHAR = '\\\\'\n        -- FIELDTERMINATOR = ',',\n        -- ROWTERMINATOR = '\\n'\n\n    )\n     AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_gold_sp')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/StoredProcedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE gold.usp_gold_trip_data\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN \n\n-----Creating a SQL\n    DECLARE @create_sql  NVARCHAR(MAX),\n            @drop_sql   NVARCHAR(MAX);\n\n    SET @create_sql = \n    'CREATE EXTERNAL TABLE gold.trip_data_green_' + @year + '_' + @month + \n\t' WITH \n\t(\n\t\tDATA_SOURCE = nyc_taxi_src,\n\t\tLOCATION = ''gold/trip_data_green/year=' + @year + '/month=' + @month + ''',\n\t\tFILE_FORMAT = parquet_file_format\n\t)\n    AS\n        SELECT td.year, \n                td.month,\n                tz.borough, \n                cal.day_name AS trip_day,\n                CONVERT(DATE, td.lpep_pickup_datetime) AS trip_date,\n                CASE WHEN cal.day_name IN (''Saturday'', ''Sunday'') THEN ''Y'' ELSE ''N'' END AS weekend_trip,\n                SUM(CASE WHEN pt.payment_type_desc = ''Credit card'' THEN 1 ELSE 0 END) AS card_trips_count,\n                SUM(CASE WHEN pt.payment_type_desc = ''Cash'' THEN 1 ELSE 0 END) AS cash_trips_count\n        FROM bronze.vw_trip_data as td\n        JOIN  silver.CETAS_taxi_zone tz ON (td.PULocationID = tz.location_id)\n        JOIN silver.CETAS_calendar cal ON (cal.date = CONVERT(DATE, td.lpep_pickup_datetime))\n        JOIN silver.CETAS_payment_type pt ON (td.payment_type = pt.payment_type)\n        WHERE td.year = ''' + @year + '''\n        AND td.month = ''' + @month + '''\n        GROUP BY \n            td.year, \n            td.month,\n            tz.borough, \n            cal.day_name,\n            CONVERT(DATE, td.lpep_pickup_datetime)\n       \n    '\n    print(@create_sql)\n\n    EXEC sp_executesql @create_sql;\n\n    SET @drop_sql = \n    ' DROP EXTERNAL TABLE gold.trip_data_green_' + @year + '_' + @month;\n\n    EXEC sp_executesql @drop_sql;\n\nEND\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_CETAS_trip_data_csv_to_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/CETAS"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE EXTERNAL TABLE silver.CETAS_trip_data\n\tWITH \n\t(\n\t\tDATA_SOURCE = nyc_taxi_src,\n\t\tLOCATION = 'silver/trip_data',\n\t\tFILE_FORMAT = parquet_file_format\n\t)\nAS\nSELECT * \nFROM bronze.trip_data;\n\n\nSELECT * FROM silver.CETAS_trip_data\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_external_table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "USe nyc_taxi_ldw\nGO\n\nDROP EXTERNAL TABLE broze.taxi_zone\n\nCREATE EXTERNAL TABLE bronze.taxi_zone\n    ( \n        location_id SMALLINT , \n        borough VARCHAR(15) ,\n        zone VARCHAR(50) ,\n        service_zone VARCHAR(15)\n     )\n    WITH (\n        LOCATION = '/raw/taxi_zone.csv',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = csv_file_format\n    )\n    ;\n\n\n\n\nSELECT * FROM bronze.taxi_zone;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_tab_separated_file')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "--Selecting data from a file with a commma\nSELECT * FROM \nOPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/trip_type.tsv',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        -- FIRSTROW = 2,\n        HEADER_ROW = TRUE,\n        -- ESCAPECHAR = '\\\\'\n        FIELDTERMINATOR = '\\t'\n        -- ROWTERMINATOR = '\\n'\n\n    )\n     AS [trip_type]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_usp_create_external_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/StoredProcedure"
				},
				"content": {
					"query": "-- USE nyc_taxi_ldw\n-- GO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_taxi_zone\n\nAS\nBEGIN \n\n-----Creating a SQL\n    DECLARE @create_sql  NVARCHAR(MAX),\n            @drop_sql NVARCHAR(MAX);\n\n\n    SET @create_sql = \n    'CREATE EXTERNAL TABLE silver.CETAS_taxi_zone\n\tWITH \n\t(\n\t\tDATA_SOURCE = nyc_taxi_src,\n\t\tLOCATION = ''silver/taxi_zone'',\n\t\tFILE_FORMAT = parquet_file_format\n\t)\n    AS\n    SELECT * \n    FROM bronze.taxi_zone;'\n    \n    print(@create_sql)\n\n    EXEC sp_executesql @create_sql;\n\n    SET @drop_sql =\n    'DROP EXTERNAL TABLE silver.CETAS_taxi_zone'\n\n    EXEC sp_executesql @drop_sql;\n\nEND\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_usp_taxi_zone_CE')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Create External Table for Taxi Zone using Stored Procedure",
				"folder": {
					"name": "nyc_taxi/StoredProcedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_taxi_zone\n-- @year VARCHAR(4),\n-- @month VARCHAR(2)\nAS\nBEGIN \n\n-----Creating a SQL\n    DECLARE @create_sql  NVARCHAR(MAX),\n            @drop_sql   NVARCHAR(MAX);\n\n    SET @create_sql = \n        'CREATE EXTERNAL TABLE silver.CETAS_taxi_zone\n         WITH \n        (\n            DATA_SOURCE = nyc_taxi_src,\n            LOCATION = ''silver/taxi_zone'',\n            FILE_FORMAT = parquet_file_format\n        )\n        AS\n        SELECT * \n        FROM bronze.taxi_zone;\n        '\n    print(@create_sql)\n\n    EXEC sp_executesql @create_sql;\n\n    SET @drop_sql = \n    'DROP EXTERNAL TABLE silver.CETAS_taxi_zone'\n\n    EXEC sp_executesql @drop_sql;\n\nEND\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_CETAS_rate_code_json_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/CETAS"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE EXTERNAL TABLE silver.CETAS_rate_code\n\tWITH \n\t(\n\t\tDATA_SOURCE = nyc_taxi_src,\n\t\tLOCATION = 'silver/rate_code',\n\t\tFILE_FORMAT = parquet_file_format\n\t)\nAS\nSELECT * \nFROM bronze.vw_rate_code;\n\n\nSELECT * FROM silver.CETAS_rate_code\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_assignment_create_table_Calender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "-- IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDelimitedTextFormat') \n-- \tCREATE EXTERNAL FILE FORMAT [SynapseDelimitedTextFormat] \n-- \tWITH ( FORMAT_TYPE = DELIMITEDTEXT ,\n-- \t       FORMAT_OPTIONS (\n-- \t\t\t FIELD_TERMINATOR = ',',\n-- \t\t\t FIRST_ROW = 11,\n-- \t\t\t USE_TYPE_DEFAULT = FALSE\n-- \t\t\t))\n-- GO\n\n-- IF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'nyc-taxidata_synapsecoursedlg_dfs_core_windows_net') \n-- \tCREATE EXTERNAL DATA SOURCE [nyc-taxidata_synapsecoursedlg_dfs_core_windows_net] \n-- \tWITH (\n-- \t\tLOCATION = 'abfss://nyc-taxidata@synapsecoursedlg.dfs.core.windows.net' \n-- \t)\n-- GO\n\nCREATE EXTERNAL TABLE bronze.calender (\n\t[date_key] bigint,\n\t[date] date,\n\t[year] bigint,\n\t[month] bigint,\n\t[day] bigint,\n\t[day_name] nvarchar(100),\n\t[day_of_year] bigint,\n\t[week_of_month] bigint,\n\t[week_of_year] bigint,\n\t[month_name] nvarchar(100),\n\t[year_month] bigint,\n\t[year_week] bigint\n\t)\n\tWITH (\n\tLOCATION = '/raw/calendar.csv',\n\tDATA_SOURCE = nyc_taxi_src,\n\tFILE_FORMAT = csv_file_format\n\t)\nGO\n\n\nSELECT TOP 100 * FROM bronze.calender\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "--Selecting data from a file with a commma\nSELECT \nCAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) payment_type,\nCAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') AS VARCHAR(100)) payment_type_desc\nFROM \nOPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '0x0b'   ,    --0x0b for vertical tab\n        FIELDQUOTE = '0x0b'\n        -- ROWTERMINATOR = '\\n'\n    )\n    WITH \n    (\n        jsonDoc NVARCHAR(MAX)\n    )\n     AS payment_type\n\n\n-----using OpenJson function\nSELECT payment_type, payment_type_desc\nFROM \nOPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '0x0b'   ,    --0x0b for vertical tab\n        FIELDQUOTE = '0x0b'\n        -- ROWTERMINATOR = '\\n'\n    )\n    WITH \n    (\n        jsonDoc NVARCHAR(MAX)\n    )\n     AS payment_type\n     CROSS APPLY OPENJSON(jsonDoc)\n    WITH \n     (\n        payment_type SMALLINT,\n        payment_type_desc NVARCHAR(MAX) \n     )\n     ;\n\n---Reading data from the json with array file\n---------------------------------------------------------------------------------------------------\n--In this query I read data from json file with an nested array, \n--I opened nested array again using OPENJSON function by specifying the JSON value holder\n-- variable name,\n--I also renamed the value varible to payment_type_desc_value, \n-- writing new name [datatype] <original_name_path> (for example in this one I did, \n-- payment_type_desc_value NVARCHAR(MAX) '$.value') \nSELECT payment_type, payment_type_desc_value\nFROM \nOPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/payment_type_array.json',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '0x0b'   ,    --0x0b for vertical tab\n        FIELDQUOTE = '0x0b'\n        -- ROWTERMINATOR = '\\n'\n    )\n    WITH \n    (\n        jsonDoc NVARCHAR(MAX)\n    )\n     AS payment_type\n     CROSS APPLY OPENJSON(jsonDoc)\n     WITH \n     (\n        payment_type SMALLINT,\n        payment_type_desc NVARCHAR(MAX) AS JSON\n     ) CROSS APPLY OPENJSON(payment_type_desc)\n     WITH \n     (\n       payment_type_desc_value NVARCHAR(MAX) '$.value'\n     )\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_Assign_CreateTable_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "CREATE EXTERNAL TABLE bronze.vendor (\n    VENDOR_ID   INT ,\n    VENDOR_NAME VARCHAR(100)\n\t)\n\tWITH (\n\tLOCATION = '/raw/vendor.csv',\n\tDATA_SOURCE = nyc_taxi_src,\n\tFILE_FORMAT = csv_file_format\n\t)\nGO\n\n\nSELECT TOP 100 * FROM bronze.vendor\nGO\n\n\n------Create external table for tripType.csv\n------Just a note, \n----If you make trip_type_desc data VARCHAR(10), it wont process any data\n-- if you put reject_value params, then all the rows with trip_type_desc will be saved in rejected folder\nIF OBJECT_ID('bronze.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_type\nCREATE EXTERNAL TABLE bronze.trip_type (\n    trip_type INT,\n    trip_type_desc VARCHAR(50)\n\t)\n\tWITH (\n\tLOCATION = '/raw/trip_type.tsv',\n\tDATA_SOURCE = nyc_taxi_src,\n\tFILE_FORMAT = tsv_file_format,\n    ------- Lets add rejected file folder\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejection/trip_type'\n\n\n\t);\nGO\n\n\nSELECT  * FROM bronze.trip_type\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_CETAS_payment_type_json_to_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/CETAS"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nIF OBJECT_ID('silver.CETAS_payment_type') IS NOT NULL\n\tDROP EXTERNAL TABLE silver.CETAS_payment_type;\n\nCREATE EXTERNAL TABLE silver.CETAS_payment_type\n\tWITH \n\t(\n\t\tDATA_SOURCE = nyc_taxi_src,\n\t\tLOCATION = 'silver/payment_type',\n\t\tFILE_FORMAT = parquet_file_format\n\t)\nAS\n    SELECT payment_type, payment_type_desc\n    FROM \n    OPENROWSET(\n            BULK 'raw/payment_type.json',\n            DATA_SOURCE = 'nyc_taxi_src',\n            FORMAT = 'CSV',\n            PARSER_VERSION = '1.0',\n            HEADER_ROW = TRUE,\n            FIELDTERMINATOR = '0x0b'   ,    --0x0b for vertical tab\n            FIELDQUOTE = '0x0b'\n            -- ROWTERMINATOR = '\\n'\n        )\n        WITH \n        (\n            jsonDoc NVARCHAR(MAX)\n        )\n        AS payment_type\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH \n        (\n            payment_type SMALLINT,\n            payment_type_desc NVARCHAR(MAX) \n        )\n     ;\n\n\nSELECT * FROM silver.CETAS_payment_type\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "SELECT rate_code_id, rate_code\nFROM \nOPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/rate_code.json',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n--         PARSER_VERSION = '1.0',\n        -- HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '0x0b',    --0x0b for vertical tab\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'   --This row terminator is required for working with standard json file\n    )\n    WITH \n    (\n        jsonDoc NVARCHAR(MAX)\n    )\n     AS rate_code\n     CROSS APPLY OPENJSON(jsonDoc)\n     WITH \n     (\n        rate_code_id TINYINT,\n        rate_code VARCHAR(20)\n     );\n\n\n----Working with classic JSON\nSELECT rate_code_id, rate_code\nFROM \nOPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/rate_code_multi_line.json',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n--         PARSER_VERSION = '1.0',\n        -- HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '0x0b',    --0x0b for vertical tab\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'   --This row terminator is required for working with standard json file\n    )\n    WITH \n    (\n        jsonDoc NVARCHAR(MAX)\n    )\n     AS rate_code\n     CROSS APPLY OPENJSON(jsonDoc)\n     WITH \n     (\n        rate_code_id TINYINT,\n        rate_code VARCHAR(20)\n     );\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_exolore_trip_data_green_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/trip_data_green_csv/year=2020/month=01/green_tripdata_2020-01.csv',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n\n-----To select the data from all the file in a folder, \n--proivided that files got same format, you can just specify folder name and it will select all the files in the folder,\n--you can also use Regex, lets say you want just csv files, then you can put <*.csv> after folder name\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/trip_data_green_csv/year=2020/month=01',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n\n---To get data from subfolder, you can put ** (two stars) after folder name to select the data\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/trip_data_green_csv/**',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n--Get data from some specofic subfolders, you can do it by specifying those folders\n--using BULK variable\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK ('nyc_green_taxi_data/raw/trip_data_green_csv/year=2020/month=01',\n        'nyc_green_taxi_data/raw/trip_data_green_csv/year=2020/month=02'),\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n--Use more than 1 wildcard character to get data from subfolder and specifivc type files\nSELECT\n    TOP 100 ,\n\nFROM\n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/trip_data_green_csv/year=2020/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n\n--The above query doesn't tell anything about whihc file data came from, we can use some metadata fx for that\n--function filename()\nSELECT\n    TOP 100 \n    result.filename() AS file_name,  -- this will only show the filename\n    result.*      --this will show the data too, it this is missing, no data will be shown\n\nFROM\n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/trip_data_green_csv/year=2020/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_external_table_trip_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDelimitedTextFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseDelimitedTextFormat] \n\tWITH ( FORMAT_TYPE = DELIMITEDTEXT ,\n\t       FORMAT_OPTIONS (\n\t\t\t FIELD_TERMINATOR = ',',\n\t\t\t FIRST_ROW = 2,\n\t\t\t USE_TYPE_DEFAULT = FALSE\n\t\t\t))\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'nyc-taxidata_synapsecoursedlg_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [nyc-taxidata_synapsecoursedlg_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://nyc-taxidata@synapsecoursedlg.dfs.core.windows.net' \n\t)\nGO\n\nDROP EXTERNAL TABLE bronze.trip_data\nGO\n\nCREATE EXTERNAL TABLE bronze.trip_data (\n\t[VendorID] bigint,\n\t[lpep_pickup_datetime] datetime2(0),\n\t[lpep_dropoff_datetime] datetime2(0),\n\t[store_and_fwd_flag] nvarchar(400),\n\t[RatecodeID] bigint,\n\t[PULocationID] bigint,\n\t[DOLocationID] bigint,\n\t[passenger_count] bigint,\n\t[trip_distance] float,\n\t[fare_amount] float,\n\t[extra] float,\n\t[mta_tax] float,\n\t[tip_amount] float,\n\t[tolls_amount] float,\n\t[ehail_fee] nvarchar(400),\n\t[improvement_surcharge] float,\n\t[total_amount] float,\n\t[payment_type] bigint,\n\t[trip_type] bigint,\n\t[congestion_surcharge] float\n\t)\n\tWITH (\n\tLOCATION = '/raw/trip_data_green_csv/**',\n\tDATA_SOURCE = nyc_taxi_src,\n\tFILE_FORMAT = csv_file_format\n\t)\nGO\n\n\nSELECT TOP 100 * FROM bronze.trip_data\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_explore_parquet_file')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedlg.dfs.core.windows.net/nyc-taxidata/nyc_green_taxi_data/raw/trip_data_green_parquet/year=2020/month=01/part-00000-tid-6133789922049958496-2e489315-890a-4453-ae93-a104be9a6f06-106-1-c000.snappy.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n\n---Calling procedure to take a look at type of data type inferref by synapse\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''nyc_green_taxi_data/raw/trip_data_green_parquet/year=2020/month=01/'',\n        DATA_SOURCE = ''nyc_taxi_data'',\n        FORMAT = ''PARQUET''\n    ) AS [result]'\n\n\n---Using wildcarts function, query all files from the folder\nSELECT\n    -- TOP 1000\n    result.filename() as file_name,\n    result.filepath() as file_path,\n    count(*) as count\n    -- result.* \nFROM\n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/trip_data_green_parquet/year=2020/**',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'PARQUET'\n    )\n    WITH \n    (\n        trip_distance FLOAT,\n        fare_amount   FLOAT,\n        total_amount  FLOAT,\n        payment_type  TINYINT\n    ) AS [result]\n    GROUP BY result.filename()\n    ORDER BY result.filename()\n\n\n---Using fielpath, learned that filepath work according to wildcard characters in the BULK variables\nSELECT\n    TOP 1000\n    -- result.filename() as file_name,\n    result.filepath() as file_path,\n    result.filepath(1) as file_path1,\n    result.filepath(2) as file_path2,\n \n    -- count(*) as count\n    result.* \nFROM\n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'PARQUET'\n    )\n    WITH \n    (\n        trip_distance FLOAT,\n        fare_amount   FLOAT,\n        total_amount  FLOAT,\n        payment_type  TINYINT\n    ) AS [result]\n    -- GROUP BY result.filepath(3)\n    -- ORDER BY result.filepath(1)\n\n\n--Use filepath to target partition\nSELECT trip_data.filepath(1) AS Year, --FilePath is taking the very first thing from the filepath\n        trip_data.filepath(2) AS Month,  --Second thing in the filepath is month, so it is found by filepath(2)\n        COUNT(1) AS record_count\n    FROM   \n    OPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'PARQUET'\n    )  AS [trip_data]\n     WHERE trip_data.filepath(1) = '2020'\n        -- AND trip_data.filepath(2) IN ('06','07','08')\n    GROUP BY trip_data.filepath(1), trip_data.filepath(2)\n    ORDER BY trip_data.filepath(1), trip_data.filepath(2)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_bronze_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "USe nyc_taxi_ldw\nGO\n\n\nIF OBJECT_ID('bronze.trip_data_green_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_parquet\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_parquet (\n\t[VendorID] bigint,\n\t[lpep_pickup_datetime] datetime2(0),\n\t[lpep_dropoff_datetime] datetime2(0),\n\t[store_and_fwd_flag] nvarchar(400),\n\t[RatecodeID] bigint,\n\t[PULocationID] bigint,\n\t[DOLocationID] bigint,\n\t[passenger_count] bigint,\n\t[trip_distance] float,\n\t[fare_amount] float,\n\t[extra] float,\n\t[mta_tax] float,\n\t[tip_amount] float,\n\t[tolls_amount] float,\n\t[email_fee] nvarchar(400),\n\t[improvement_surcharge] float,\n\t[total_amount] float,\n\t[payment_type] bigint,\n\t[trip_type] bigint,\n\t[congestion_surcharge] float\n\t)\n\tWITH (\n\tLOCATION = '/raw/trip_data_green_parquet/**',\n\tDATA_SOURCE = nyc_taxi_src,\n\tFILE_FORMAT = parquet_file_format\n\t)\nGO\n\n\nIF OBJECT_ID('bronze.trip_data_green_delta') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_delta\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_delta (\n\t[VendorID] bigint,\n\t[lpep_pickup_datetime] datetime2(0),\n\t[lpep_dropoff_datetime] datetime2(0),\n\t[store_and_fwd_flag] nvarchar(400),\n\t[RatecodeID] bigint,\n\t[PULocationID] bigint,\n\t[DOLocationID] bigint,\n\t[passenger_count] bigint,\n\t[trip_distance] float,\n\t[fare_amount] float,\n\t[extra] float,\n\t[mta_tax] float,\n\t[tip_amount] float,\n\t[tolls_amount] float,\n\t[email_fee] nvarchar(400),\n\t[improvement_surcharge] float,\n\t[total_amount] float,\n\t[payment_type] bigint,\n\t[trip_type] bigint,\n\t[congestion_surcharge] float\n\t)\n\tWITH (\n\tLOCATION = '/raw/trip_data_green_delta',\n\tDATA_SOURCE = nyc_taxi_src,\n\tFILE_FORMAT = delta_file_format\n\t)\n\n\nSELECT TOP 100 * FROM bronze.trip_data_green_delta;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_delta_lake_files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedlg.dfs.core.windows.net/nyc-taxidata/nyc_green_taxi_data/raw/trip_data_green_delta/',\n        FORMAT = 'DELTA'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/My demo Query Parquet files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo folder"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read parquet file */\nSELECT TOP 10 *\nFROM OPENROWSET(\n    BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n    FORMAT = 'parquet') as rows\n\n\n/* Explicitly specify schema */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n        FORMAT = 'parquet'\n    ) WITH ( date_rep date, cases int, geo_id varchar(6) ) as rows\n\n\n/* New York City Taxi opendata set */\n\n/* Query set of parquet files */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) WITH (\n        tpepPickupDateTime DATETIME2,\n        passengerCount INT\n    ) AS nyc\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n\n\n/* Automatic schema inference */\nSELECT TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS nyc\n\n\n/* Query partitioned data */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) nyc\nWHERE\n    nyc.filepath(1) = 2017\n    AND nyc.filepath(2) IN (1, 2, 3)\n    AND tpepPickupDateTime BETWEEN CAST('1/1/2017' AS datetime) AND CAST('3/31/2017' AS datetime)\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/assignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "    -- taxi_zone_data.Borough, COUNT(1) AS number_of_trips\nWITH v_payment_type_data AS \n(SELECT \nCAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) payment_type,\nCAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') AS VARCHAR(100)) payment_type_desc\nFROM \nOPENROWSET(\n        BULK 'nyc_green_taxi_data/raw/payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '0x0b'   ,    --0x0b for vertical tab\n        FIELDQUOTE = '0x0b'\n        -- ROWTERMINATOR = '\\n'\n    )\n    WITH \n    (\n        jsonDoc NVARCHAR(MAX)\n    )\n     AS [result]\n    ),\n\nv_trip_data AS \n\n    (SELECT * FROM \n        OPENROWSET(\n            BULK 'nyc_green_taxi_data/raw/trip_data_green_parquet/year=2020/month=01/*.parquet',\n            DATA_SOURCE = 'nyc_taxi_data',\n            FORMAT = 'PARQUET'\n        ) \n        --     WITH \n        -- (\n        --     payment_type INT\n        -- )\n        AS [result]\n)\n,\nv_taxi_zone AS \n( \n    SELECT * FROM \n    OPENROWSET(\n        BULK 'https://synapsecoursedlg.dfs.core.windows.net/nyc-taxidata/nyc_green_taxi_data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [taxi_zone_data]\n)\n\nSELECT TOP 100 \n * FROM\n v_trip_data\n LEFT JOIN v_payment_type_data ON (v_trip_data.payment_type = v_payment_type_data.payment_type)\n  LEFT JOIN v_taxi_zone ON (v_trip_data.PULocationID = v_taxi_zone.LocationID)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/gold_final_view')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw (logical data warehouse)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nDROP VIEW IF EXISTS gold.vw_trip_data\nGO\nCREATE VIEW gold.vw_trip_data AS  \nSELECT trip_data.filepath(1) AS year, --FilePath is taking the very first thing from the filepath\n        trip_data.filepath(2) AS month,  --Second thing in the filepath is month, so it is found by filepath(2)\n        trip_data.*\n    FROM   \n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n        -- ,HEADER_ROW = TRUE\n    ) \n    WITH \n    (\n        borough VARCHAR(50),\n        trip_day VARCHAR(50),\n        trip_date VARCHAR(MAX),\n        weekend_trip NVARCHAR(MAX),\n        card_trips_count INT, \n        cash_trips_count INT\n    ) AS [trip_data]\n    \n    --  WHERE trip_data.filepath(1) = '2020'\n    --     -- AND trip_data.filepath(2) IN ('06','07','08')\n    -- GROUP BY trip_data.filepath(1), trip_data.filepath(2)\n    -- ORDER BY trip_data.filepath(1), trip_data.filepath(2)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/set_serverless_cost_control')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Utils"
				},
				"content": {
					"query": "SELECT * FROM sys.dm_external_data_processed\n\nSELECT * FROM sys.configurations\nWHERE name LIKE '%Data Processed%'\n\nsp_set_data_processed_limit\n    @type = N'monthly',\n    @limit_tb = 2;\n\nsp_set_data_processed_limit\n    @type = N'weekly',\n    @limit_tb = 1;\n\nsp_set_data_processed_limit\n    @type = N'daily',\n    @limit_tb = 1;\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}